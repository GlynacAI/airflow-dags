# -*- coding: utf-8 -*-
"""schema_validation_dag.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1s4SNqEosD-0F2VjJsrCNJll_yLXaFYz6
"""

import os
import pandas as pd
from datetime import datetime, timedelta
from airflow.models.dag import DAG
from airflow.operators.python import PythonOperator
from airflow.exceptions import AirflowException

# Default args for the DAG
default_args = {
    'owner': 'lavanya',
    'retries': 1,
    'retry_delay': timedelta(minutes=5),
}

EXPECTED_SCHEMAS = {
    "lead_log.csv": {
        "id": "int64",
        "lead_id": "object",
        "source_category": "object",
        "created_at": "object",
        "preferred_location": "object",
        "timezone_location": "object",
        "current_status": "object",
    },
    "paid_transactions.csv": {
        "transaction_id": "object",
        "transaction_status": "object",
        "transaction_at": "object",
        "transaction_location": "object",
        "timezone_transaction": "object",
        "transaction_type": "object",
    },
    "referral_rewards.csv": {
        "id": "int64",
        "reward_value": "object",
        "created_at": "object",
        "reward_type": "int64",
    },
    "user_logs.csv": {
        "id": "int64",
        "user_id": "object",
        "name": "object",
        "phone_number": "object",
        "homeclub": "object",
        "timezone_homeclub": "object",
        "membership_expired_date": "object",
        "is_deleted": "bool",
    },
    "user_referral_logs.csv": {
    "id": "int64",
    "user_referral_id": "object",
    "source_transaction_id": "float64",
    "created_at": "object",
    "is_reward_granted": "bool",
    },
    "user_referral_statuses.csv": {
        "id": "int64",
        "description": "object",
        "created_at": "object",
    },
    "user_referrals.csv": {
        "referral_at": "object",
        "referral_id": "object",
        "referee_id": "object",
        "referee_name": "object",
        "referee_phone": "object",
        "referral_reward_id": "float64",
        "referral_source": "object",
        "referrer_id": "object",
        "transaction_id": "object",
        "updated_at": "object",
        "user_referral_status_id": "int64",
    }
}

DATA_FOLDER = '/opt/airflow/data'

def validate_schema(file_name: str):
    """
    Validate CSV file schema against the expected schema.
    """
    file_path = os.path.join(DATA_FOLDER, file_name)

    if not os.path.exists(file_path):
        raise AirflowException(f"File not found: {file_path}")

    df = pd.read_csv(file_path, nrows=5, low_memory=False)

    expected_schema = EXPECTED_SCHEMAS[file_name]
    expected_columns = set(expected_schema.keys())
    actual_columns = set(df.columns)

    if actual_columns != expected_columns:
        missing = sorted(list(expected_columns - actual_columns))
        extra = sorted(list(actual_columns - expected_columns))
        raise AirflowException(f"{file_name}: Columns mismatch. Missing: {missing}. Extra: {extra}")

    # Check data types
    for col, expected_dtype in expected_schema.items():
        actual_dtype = str(df[col].dtype)
        if actual_dtype != expected_dtype:
            raise AirflowException(
                f"{file_name}: Column '{col}' has dtype '{actual_dtype}', expected '{expected_dtype}'"
            )

    print(f"{file_name} schema validation passed.")

# DAG definition
with DAG(
    dag_id='schema_validation_dag',
    default_args=default_args,
    description='Validate raw CSV schema before transformation',
    schedule=None,
    start_date=datetime(2025, 1, 1),
    catchup=False,
    tags=['validation', 'schema'],
) as dag:

    # Create a PythonOperator for each CSV file validation
    for csv_file in EXPECTED_SCHEMAS.keys():
        PythonOperator(
            task_id=f'validate_{csv_file.replace(".csv", "")}',
            python_callable=validate_schema,
            op_args=[csv_file],
        )